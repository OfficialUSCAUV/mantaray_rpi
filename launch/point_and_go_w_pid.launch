<!--Run the orientation_reader.py file to set the initial orientation that we want -->
<!--
  If possible, I want to get rid of this human part of it and just have the code find the orientation
on its own. I think this can be done by having mantaray control save it's initial orientation before
moving by using a delay that's only a bit slower than the start of comp_thruster_comms.py to give the
diver time to move the thruster in the correct orientation
-->

<launch>
  <arg name="get_orien_delay" default = "2.0"/>  <!-- Starts a 30 second timer before moving -->
  <arg name="control_delay" default = "5.0"/>  <!-- Starts a 30 second timer before moving -->
  <arg name="start_thrusters_delay" default = "6.0"/>  <!-- Starts a 30 second timer before moving -->
  <param name="targetRadian" type="double" value="0.8"/> <!-- An estimate of where the goal post is -->
  <param name="targetUpdated" type="bool" value="False"/> <!-- Whether getStartingOrientation was finished running-->
  <!-- IMU Publisher just publishes-->
  <node name="imu_publisher" pkg="mantaray_rpi" type="imu_publisher" output="screen" respawn="true"/>
  <!-- Sets the rosparam <targetRadian> to be it's current radian. Also adds a delay -->
  <node name="getInitOrientation" pkg="mantaray_rpi" type="getInitOrientation.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg get_orien_delay); $0 $@' "/>
  <!-- comp_main starts earlier than comp_thrusters_comms.py since comp_thrusters_comms.py subcribes
  to the thruster outputs after all of the thrusters are initialized-->
  <node name="yawSetPoint" pkg="mantaray_rpi" type="comp_setpoint_pub.py" output="screen" respawn="false"/>
  <node name="YawState" pkg="mantaray_rpi" type="comp_state_pub.py" output="screen" respawn="false"/>
  <node name="yaw_pid" pkg="pid" type="controller">
    <param name="node_name" value="yaw_pid" />
    <param name = "Kp" value="5.0"/>
    <param name = "Ki" value="0.0"/>
    <param name = "Kd" value="0.1"/>
    <param name = "upper_limit" value="20"/>
    <param name = "lower_limit" value="-20"/>
    <param name = "windup_limit" value="20"/>
    <param name="max_loop_frequency" value="1.0"/>
    <param name="min_loop_frequency" value="1.0"/>
  </node>

  <!-- <node name="mantaray_control" pkg="mantaray_rpi" type="comp_main.py" output="screen" respawn="true" launch-prefix="bash -c 'sleep $(arg control_delay); $0 $@' "/>  -->

  <!-- The only one that needs a delay is comp_thruster_comms.py since it has a gradual accel anyway -->
  <!-- As soon as all the thrusters init, they have to go fast. If it is too slow, give them priority-->
  
  <!-- <node name="thrusters" pkg="mantaray_rpi" type="comp_thruster_comms.py" output="screen" respawn="true" launch-prefix="bash -c 'sleep $(arg start_thrusters_delay); $0 $@' "/>  -->
</launch>
